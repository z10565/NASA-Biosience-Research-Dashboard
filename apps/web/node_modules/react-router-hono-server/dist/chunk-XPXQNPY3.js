// src/helpers.ts
import { createMiddleware } from "hono/factory";
var defaultWebSocket = {
  upgradeWebSocket: () => {
  },
  injectWebSocket: (server) => server
};
async function createWebSocket({ app, enabled }) {
  if (!enabled) {
    return defaultWebSocket;
  }
  const mode = process.env.NODE_ENV === "development" ? "development" : "production";
  const DEV = mode === "development";
  const runtime = import.meta.env.REACT_ROUTER_HONO_SERVER_RUNTIME;
  if (DEV || runtime === "node") {
    const { createNodeWebSocket } = await import("@hono/node-ws");
    const { injectWebSocket, upgradeWebSocket } = createNodeWebSocket({ app });
    return {
      upgradeWebSocket,
      injectWebSocket(server) {
        injectWebSocket(server);
        return server;
      }
    };
  }
  if (runtime === "bun") {
    const { createBunWebSocket } = await import("hono/bun");
    const { upgradeWebSocket, websocket } = createBunWebSocket();
    return {
      upgradeWebSocket,
      injectWebSocket: (server) => {
        return {
          ...server,
          websocket
        };
      }
    };
  }
  return defaultWebSocket;
}
function cleanUpgradeListeners(httpServer) {
  const upgradeListeners = httpServer.listeners("upgrade").filter((listener) => listener.name !== "hmrServerWsListener");
  for (const listener of upgradeListeners) {
    httpServer.removeListener(
      "upgrade",
      /* @ts-ignore - we don't care */
      listener
    );
  }
}
function patchUpgradeListener(httpServer) {
  const upgradeListeners = httpServer.listeners("upgrade").filter((listener) => listener.name !== "hmrServerWsListener");
  for (const listener of upgradeListeners) {
    httpServer.removeListener(
      "upgrade",
      /* @ts-ignore - we don't care */
      listener
    );
    httpServer.on("upgrade", (request, ...rest) => {
      if (request.headers["sec-websocket-protocol"] === "vite-hmr") {
        return;
      }
      return listener(request, ...rest);
    });
  }
}
function bindIncomingRequestSocketInfo() {
  return createMiddleware((c, next) => {
    c.env.server = {
      incoming: {
        socket: {
          remoteAddress: c.req.raw.headers.get("x-remote-address") || void 0,
          remotePort: Number(c.req.raw.headers.get("x-remote-port")) || void 0,
          remoteFamily: c.req.raw.headers.get("x-remote-family") || void 0
        }
      }
    };
    return next();
  });
}
async function importBuild() {
  return await import(
    // @ts-expect-error - Virtual module provided by React Router at build time
    "virtual:react-router/server-build"
  );
}
function createGetLoadContext(getLoadContext) {
  return getLoadContext;
}
function getBuildMode() {
  return process.env.NODE_ENV === "development" ? "development" : "production";
}

export {
  createWebSocket,
  cleanUpgradeListeners,
  patchUpgradeListener,
  bindIncomingRequestSocketInfo,
  importBuild,
  createGetLoadContext,
  getBuildMode
};
