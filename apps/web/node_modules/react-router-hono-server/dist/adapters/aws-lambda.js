import {
  bindIncomingRequestSocketInfo,
  createGetLoadContext,
  getBuildMode,
  importBuild
} from "../chunk-XPXQNPY3.js";
import {
  cache
} from "../chunk-YI5FED4X.js";

// src/adapters/aws-lambda.ts
import { serveStatic } from "@hono/node-server/serve-static";
import { Hono } from "hono";
import { handle, streamHandle } from "hono/aws-lambda";
import { createMiddleware } from "hono/factory";
import { logger } from "hono/logger";
import { createRequestHandler } from "react-router";
async function createHonoServer(options) {
  const basename = import.meta.env.REACT_ROUTER_HONO_SERVER_BASENAME;
  const mergedOptions = {
    ...options,
    invokeMode: options?.invokeMode ?? "default",
    defaultLogger: options?.defaultLogger ?? true
  };
  const mode = getBuildMode();
  const PRODUCTION = mode === "production";
  const clientBuildPath = `${import.meta.env.REACT_ROUTER_HONO_SERVER_BUILD_DIRECTORY}/client`;
  const app = new Hono(mergedOptions.app);
  if (!PRODUCTION) {
    app.use(bindIncomingRequestSocketInfo());
  }
  await mergedOptions.beforeAll?.(app);
  if (!PRODUCTION) {
    app.use(
      `/${import.meta.env.REACT_ROUTER_HONO_SERVER_ASSETS_DIR}/*`,
      cache(60 * 60 * 24 * 365),
      // 1 year
      serveStatic({ root: clientBuildPath })
    );
    app.use(
      "*",
      cache(60 * 60),
      // 1 hour
      serveStatic({ root: PRODUCTION ? clientBuildPath : "./public" })
    );
  }
  if (mergedOptions.defaultLogger) {
    app.use("*", logger());
  }
  await mergedOptions.configure?.(app);
  const reactRouterApp = new Hono({
    strict: false
  });
  reactRouterApp.use(async (c, next) => {
    const build = await importBuild();
    return createMiddleware(async (c2) => {
      const requestHandler = createRequestHandler(build, mode);
      const loadContext = mergedOptions.getLoadContext?.(c2, { build, mode });
      return requestHandler(c2.req.raw, loadContext instanceof Promise ? await loadContext : loadContext);
    })(c, next);
  });
  app.route(`${basename}`, reactRouterApp);
  if (basename) {
    app.route(`${basename}.data`, reactRouterApp);
  }
  if (PRODUCTION) {
    if (mergedOptions.invokeMode === "stream") {
      return streamHandle(app);
    }
    return handle(app);
  }
  console.log("\u{1F6A7} Dev server started");
  return app;
}
export {
  createGetLoadContext,
  createHonoServer
};
