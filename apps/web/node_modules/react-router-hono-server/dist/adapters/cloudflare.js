import {
  bindIncomingRequestSocketInfo,
  createGetLoadContext,
  getBuildMode,
  importBuild
} from "../chunk-XPXQNPY3.js";
import {
  cache
} from "../chunk-YI5FED4X.js";

// src/adapters/cloudflare.ts
import { Hono } from "hono";
import { createMiddleware } from "hono/factory";
import { logger } from "hono/logger";
import { createRequestHandler } from "react-router";
async function createHonoServer(options) {
  const basename = import.meta.env.REACT_ROUTER_HONO_SERVER_BASENAME;
  const mergedOptions = {
    ...options,
    defaultLogger: options?.defaultLogger ?? true
  };
  const mode = getBuildMode();
  const PRODUCTION = mode === "production";
  const app = new Hono(mergedOptions.app);
  await mergedOptions.beforeAll?.(app);
  app.use(
    // https://developers.cloudflare.com/workers/static-assets/binding/#experimental_serve_directly
    `/${import.meta.env.REACT_ROUTER_HONO_SERVER_ASSETS_DIR}/*`,
    cache(60 * 60 * 24 * 365),
    // 1 year
    serveCloudflareAssets()
  );
  if (PRODUCTION) {
    app.use(
      // https://developers.cloudflare.com/workers/static-assets/binding/#experimental_serve_directly
      "*",
      cache(60 * 60),
      // 1 hour
      serveCloudflareAssets()
    );
  } else {
    const { serveStatic } = await import("@hono/node-server/serve-static");
    app.use(
      "*",
      cache(60 * 60),
      // 1 hour
      serveStatic({ root: "./public" })
    );
    app.use(bindIncomingRequestSocketInfo());
  }
  if (mergedOptions.defaultLogger) {
    app.use("*", logger());
  }
  await mergedOptions.configure?.(app);
  const reactRouterApp = new Hono({
    strict: false
  });
  reactRouterApp.use(async (c, next) => {
    const build = await importBuild();
    return createMiddleware(async (c2) => {
      const requestHandler = createRequestHandler(build, mode);
      const loadContext = mergedOptions.getLoadContext?.(c2, { build, mode });
      return requestHandler(c2.req.raw, loadContext instanceof Promise ? await loadContext : loadContext);
    })(c, next);
  });
  app.route(`${basename}`, reactRouterApp);
  if (basename) {
    app.route(`${basename}.data`, reactRouterApp);
  }
  if (!PRODUCTION) {
    console.log("\u{1F6A7} Running in development mode");
  }
  return app;
}
var warned = false;
function serveCloudflareAssets() {
  return createMiddleware(async (c, next) => {
    const binding = c.env?.ASSETS;
    if (!binding) {
      if (!warned) {
        console.info(
          "\x1B[33m\nThe binding ASSETS is not set. Falling back to Cloudflare serving.\nhttps://developers.cloudflare.com/workers/static-assets/binding/#binding\n\x1B[0m"
        );
      }
      warned = true;
      return next();
    }
    try {
      let response = await binding.fetch(
        c.req.url,
        c.req.raw.clone()
      );
      if (response.status >= 400) {
        return next();
      }
      response = new Response(response.body, response);
      return response;
    } catch {
      return next();
    }
  });
}
export {
  createGetLoadContext,
  createHonoServer
};
