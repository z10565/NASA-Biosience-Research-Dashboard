import * as hono_aws_lambda from 'hono/aws-lambda';
import * as hono_types from 'hono/types';
import { BlankEnv } from 'hono/types';
import { Env, Hono } from 'hono';
import { H as HonoServerOptionsBase, W as WithoutWebsocket } from '../helpers-BcJiNpMs.js';
export { c as createGetLoadContext } from '../helpers-BcJiNpMs.js';
import 'hono/ws';
import 'react-router';

interface CognitoIdentity {
    cognitoIdentityId: string;
    cognitoIdentityPoolId: string;
}
interface ClientContext {
    client: ClientContextClient;
    Custom?: any;
    env: ClientContextEnv;
}
interface ClientContextClient {
    installationId: string;
    appTitle: string;
    appVersionName: string;
    appVersionCode: string;
    appPackageName: string;
}
interface ClientContextEnv {
    platformVersion: string;
    platform: string;
    make: string;
    model: string;
    locale: string;
}
/**
 * {@link Handler} context parameter.
 * See {@link https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html AWS documentation}.
 */
interface LambdaContext {
    callbackWaitsForEmptyEventLoop: boolean;
    functionName: string;
    functionVersion: string;
    invokedFunctionArn: string;
    memoryLimitInMB: string;
    awsRequestId: string;
    logGroupName: string;
    logStreamName: string;
    identity?: CognitoIdentity | undefined;
    clientContext?: ClientContext | undefined;
    getRemainingTimeInMillis(): number;
}
type Callback<TResult = any> = (error?: Error | string | null, result?: TResult) => void;
type Handler<TEvent = any, TResult = any> = (event: TEvent, context: LambdaContext, callback: Callback<TResult>) => void | Promise<TResult>;

type InvokeMode = "default" | "stream";
interface HonoAWSServerOptions<E extends Env = BlankEnv> extends Omit<HonoServerOptionsBase<E>, "port"> {
    /**
     * The invoke mode to use
     *
     * Defaults to `default`
     *
     * {@link https://hono.dev/docs/getting-started/aws-lambda#lambda-response-streaming}
     */
    invokeMode: InvokeMode;
}
type HonoServerOptions<E extends Env = BlankEnv> = HonoAWSServerOptions<E> & Omit<WithoutWebsocket<E>, "useWebSocket">;
/**
 * Create a Hono server
 *
 * @param config {@link HonoServerOptions} - The configuration options for the server
 */
declare function createHonoServer<E extends Env = BlankEnv>(options?: HonoServerOptions<E>): Promise<Hono<E, hono_types.BlankSchema, "/"> | Handler | (<L extends hono_aws_lambda.LambdaEvent>(event: L, lambdaContext?: hono_aws_lambda.LambdaContext) => Promise<hono_aws_lambda.APIGatewayProxyResult & (L extends {
    multiValueHeaders: Record<string, string[]>;
} ? {
    headers?: undefined;
    multiValueHeaders: Record<string, string[]>;
} : {
    headers: Record<string, string>;
    multiValueHeaders?: undefined;
})>)>;

export { type HonoServerOptions, createHonoServer };
