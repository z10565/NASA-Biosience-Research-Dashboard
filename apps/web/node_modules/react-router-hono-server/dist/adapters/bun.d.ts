import { Serve, ServeOptions } from 'bun';
import { Env } from 'hono';
import { ServeStaticOptions } from 'hono/serve-static';
import { BlankEnv } from 'hono/types';
import { H as HonoServerOptionsBase, a as WithWebsocket, W as WithoutWebsocket } from '../helpers-BcJiNpMs.js';
export { c as createGetLoadContext } from '../helpers-BcJiNpMs.js';
import 'hono/ws';
import 'react-router';

type CustomBunServer = Serve & ServeOptions & {
    websocket?: unknown;
};
interface HonoBunServerOptions<E extends Env = BlankEnv> extends HonoServerOptionsBase<E> {
    /**
     * Customize the bun server
     *
     * {@link https://bun.sh/docs/api/http#start-a-server-bun-serve}
     */
    customBunServer?: Partial<CustomBunServer>;
    /**
     * Customize the serve static options
     */
    serveStaticOptions?: {
        /**
         * Customize the public assets (what's in your `public` directory) serve static options.
         *
         */
        publicAssets?: Omit<ServeStaticOptions<E>, "root">;
        /**
         * Customize the client assets (what's in your `build/client/assets` directory - React Router) serve static options.
         *
         */
        clientAssets?: Omit<ServeStaticOptions<E>, "root">;
    };
}
type HonoServerOptionsWithWebSocket<E extends Env = BlankEnv> = HonoBunServerOptions<E> & WithWebsocket<E>;
type HonoServerOptionsWithoutWebSocket<E extends Env = BlankEnv> = HonoBunServerOptions<E> & WithoutWebsocket<E>;
type HonoServerOptions<E extends Env = BlankEnv> = HonoServerOptionsWithWebSocket<E> | HonoServerOptionsWithoutWebSocket<E>;
/**
 * Create a Hono server
 *
 * @param HonoServerOptions options {@link HonoServerOptions} - The configuration options for the server
 */
declare function createHonoServer<E extends Env = BlankEnv>(options?: HonoServerOptionsWithoutWebSocket<E>): Promise<CustomBunServer>;
declare function createHonoServer<E extends Env = BlankEnv>(options?: HonoServerOptionsWithWebSocket<E>): Promise<CustomBunServer>;

export { type HonoServerOptions, createHonoServer };
