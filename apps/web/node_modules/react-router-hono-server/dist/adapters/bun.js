import {
  bindIncomingRequestSocketInfo,
  cleanUpgradeListeners,
  createGetLoadContext,
  createWebSocket,
  getBuildMode,
  importBuild,
  patchUpgradeListener
} from "../chunk-XPXQNPY3.js";
import {
  cache
} from "../chunk-YI5FED4X.js";

// src/adapters/bun.ts
import { Hono } from "hono";
import { serveStatic } from "hono/bun";
import { createMiddleware } from "hono/factory";
import { logger } from "hono/logger";
import { createRequestHandler } from "react-router";
async function createHonoServer(options) {
  const build = await importBuild();
  const basename = import.meta.env.REACT_ROUTER_HONO_SERVER_BASENAME;
  const mergedOptions = {
    ...options,
    port: options?.port || Number(options?.customBunServer?.port) || Number(process.env.PORT) || 3e3,
    defaultLogger: options?.defaultLogger ?? true
  };
  const mode = getBuildMode();
  const PRODUCTION = mode === "production";
  const clientBuildPath = `${import.meta.env.REACT_ROUTER_HONO_SERVER_BUILD_DIRECTORY}/client`;
  const app = new Hono(mergedOptions.app);
  const { upgradeWebSocket, injectWebSocket } = await createWebSocket({
    app,
    enabled: mergedOptions.useWebSocket ?? false
  });
  if (!PRODUCTION) {
    app.use(bindIncomingRequestSocketInfo());
  }
  await mergedOptions.beforeAll?.(app);
  app.use(
    `/${import.meta.env.REACT_ROUTER_HONO_SERVER_ASSETS_DIR}/*`,
    cache(60 * 60 * 24 * 365),
    // 1 year
    serveStatic({
      root: clientBuildPath,
      ...mergedOptions.serveStaticOptions?.clientAssets
    })
  );
  app.use(
    "*",
    cache(60 * 60),
    // 1 hour
    serveStatic({
      root: PRODUCTION ? clientBuildPath : "./public",
      ...mergedOptions.serveStaticOptions?.publicAssets
    })
  );
  if (mergedOptions.defaultLogger) {
    app.use("*", logger());
  }
  if (mergedOptions.useWebSocket) {
    await mergedOptions.configure(app, { upgradeWebSocket });
  } else {
    await mergedOptions.configure?.(app);
  }
  const reactRouterApp = new Hono({
    strict: false
  });
  reactRouterApp.use((c, next) => {
    return createMiddleware(async (c2) => {
      const requestHandler = createRequestHandler(build, mode);
      const loadContext = mergedOptions.getLoadContext?.(c2, { build, mode });
      return requestHandler(c2.req.raw, loadContext instanceof Promise ? await loadContext : loadContext);
    })(c, next);
  });
  app.route(`${basename}`, reactRouterApp);
  if (basename) {
    app.route(`${basename}.data`, reactRouterApp);
  }
  let server = {
    ...mergedOptions.customBunServer,
    fetch: app.fetch,
    port: mergedOptions.port,
    development: !PRODUCTION
  };
  if (PRODUCTION) {
    server = injectWebSocket(server);
  } else if (globalThis.__viteDevServer?.httpServer) {
    const httpServer = globalThis.__viteDevServer.httpServer;
    cleanUpgradeListeners(httpServer);
    injectWebSocket(httpServer);
    patchUpgradeListener(httpServer);
    console.log("\u{1F6A7} Running in development mode");
  }
  return server;
}
export {
  createGetLoadContext,
  createHonoServer
};
