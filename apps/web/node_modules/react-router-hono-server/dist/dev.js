// src/dev.ts
import fs from "fs";
import path from "path";
import honoDevServer from "@hono/vite-dev-server";
import bunAdapter from "@hono/vite-dev-server/bun";
import nodeAdapter from "@hono/vite-dev-server/node";
var REACT_ROUTER_SERVER_BUILD_MODULE_ID = "\0virtual:react-router/server-build";
var VIRTUAL_MODULE_ID = "\0virtual:react-router-hono-server/server";
var REACT_ROUTER_EXPORT = "export { serverManifest as assets, assetsBuildDirectory, basename, entry, future, isSpaMode, prerender, publicPath, routes, ssr, routeDiscovery };";
function reactRouterHonoServer(options = {}) {
  const runtime = options.runtime || "node";
  let pluginConfig;
  let devServerPlugin;
  return {
    name: "react-router-hono-server",
    enforce: "post",
    resolveId(id) {
      if (id === VIRTUAL_MODULE_ID) {
        return id;
      }
    },
    load(id) {
      if (id === VIRTUAL_MODULE_ID) {
        return `
          // generated by react-router-hono-server/dev
          import { createHonoServer } from "react-router-hono-server/${runtime}";

          export default await createHonoServer();
        `;
      }
    },
    async config(config, env) {
      pluginConfig = resolvePluginConfig(config, options);
      if (!pluginConfig) {
        return;
      }
      const serverEntryPoint = pluginConfig.serverEntryPoint;
      if (pluginConfig.future.unstable_viteEnvironmentApi) {
        console.warn(
          "\x1B[33mThe unstable_viteEnvironmentApi is enabled.\nThis is experimental and may break your build.\x1B[0m\n"
        );
      }
      if (env.mode === "development" && runtime === "cloudflare" && !config.plugins?.find((p) => p && "name" in p && p.name === "react-router-cloudflare-vite-dev-proxy")) {
        console.warn(
          `\x1B[31mMissing cloudflareDevProxy() in your vite.config.ts.
Please add it to your plugins: import { cloudflareDevProxy } from "@react-router/dev/vite/cloudflare";\x1B[0m
`
        );
      }
      const baseConfig = {
        // Define environment variables that are hot-swapped during development and SSR build
        define: {
          "import.meta.env.REACT_ROUTER_HONO_SERVER_BUILD_DIRECTORY": JSON.stringify(pluginConfig.buildDirectory),
          "import.meta.env.REACT_ROUTER_HONO_SERVER_ASSETS_DIR": JSON.stringify(pluginConfig.assetsDir),
          "import.meta.env.REACT_ROUTER_HONO_SERVER_RUNTIME": JSON.stringify(runtime),
          "import.meta.env.REACT_ROUTER_HONO_SERVER_BASENAME": JSON.stringify(pluginConfig.basename)
        },
        ssr: {
          target: runtime === "cloudflare" ? "webworker" : void 0,
          // Ensure our package is not externalized during SSR build
          // This is necessary because we are using a virtual import to load the React Router server entry point
          noExternal: ["react-router-hono-server"],
          external: ["@hono/node-ws"]
        }
      };
      if (!pluginConfig.future.unstable_viteEnvironmentApi && !pluginConfig.isSsrBuild) {
        return baseConfig;
      }
      let reactRouterBuildFile = pluginConfig.serverBuildFile;
      if (reactRouterBuildFile === "index.js") {
        reactRouterBuildFile = "assets/server-build.js";
      }
      let alias = void 0;
      if (runtime === "cloudflare") {
        const reactVersion = await getReactVersion(pluginConfig);
        alias = {
          "react-dom/server": reactVersion >= 19 ? "react-dom/server.edge" : "react-dom/server.browser"
        };
      }
      if (runtime === "bun" && pluginConfig.future.unstable_viteEnvironmentApi) {
        throw new Error(
          "The unstable_viteEnvironmentApi is not supported with the Bun runtime. Please disable it in your react-router.config.ts"
        );
      }
      if (runtime === "bun" && env.command === "build") {
        alias = {
          "react-dom/server": "react-dom/server.node"
        };
      }
      const ssrConfig = {
        resolve: {
          alias
        },
        build: {
          rollupOptions: {
            input: serverEntryPoint,
            output: {
              entryFileNames: (chunk) => {
                chunk.facadeModuleId = REACT_ROUTER_SERVER_BUILD_MODULE_ID;
                return "index.js";
              },
              // not invoked when target is webworker (single file output)
              chunkFileNames: (chunk) => {
                if (chunk.name === "server-build") {
                  return reactRouterBuildFile;
                }
                return "assets/[name]-[hash].js";
              },
              manualChunks: runtime !== "cloudflare" ? (id, meta) => {
                if (meta.getModuleInfo(id)?.importers.some((id2) => id2.includes(serverEntryPoint))) {
                  return path.basename(id, path.extname(id));
                }
                return void 0;
              } : void 0,
              // We are doing that because we build a single file that only exports the Hono server
              // RR needs its exports for prerendering
              footer: runtime === "cloudflare" ? REACT_ROUTER_EXPORT : void 0
            }
          }
        }
      };
      if (pluginConfig.future.unstable_viteEnvironmentApi) {
        return {
          ...baseConfig,
          environments: {
            ssr: ssrConfig
          }
        };
      }
      return {
        ...baseConfig,
        ...ssrConfig
      };
    },
    async closeBundle() {
      if (!pluginConfig || !pluginConfig.isSsrBuild || runtime !== "cloudflare") {
        return;
      }
      console.log("Cleaning up server exports...");
      const buildPath = path.join(pluginConfig.rootDirectory, pluginConfig.buildDirectory, "server", "index.js");
      let serverFile = await fs.promises.readFile(buildPath, "utf-8").catch((e) => {
        if (e.code === "ENOENT") {
          console.error("\x1B[31m\nThe server was not built\x1B[0m");
          if (pluginConfig?.flag?.force_react_19) {
            console.error(
              "\x1B[31m\nYou are forcing React 19 but the server failed to be built by React Router.\nCheck your dependencies, but it's possible that your project is still using React 18 from a node_modules root (monorepo?)\n\x1B[0m"
            );
          }
        }
        return null;
      });
      if (!serverFile) {
        return;
      }
      serverFile = serverFile.replace(REACT_ROUTER_EXPORT, "");
      if (await getReactVersion(pluginConfig) >= 19) {
        serverFile = serverFile.replace(/react-dom\/server\.browser/g, "react-dom/server.edge");
      }
      await fs.promises.writeFile(buildPath, serverFile);
      console.log("\x1B[32mAll done!\x1B[0m");
    },
    async configureServer(server) {
      globalThis.__viteDevServer = server;
      if (!pluginConfig) {
        return;
      }
      if (devServerPlugin) {
        return;
      }
      let adapter = nodeAdapter;
      if (runtime === "bun") {
        adapter = bunAdapter;
      }
      if (runtime === "cloudflare") {
        const { cloudflareAdapter } = await import("@hono/vite-dev-server/cloudflare");
        adapter = cloudflareAdapter;
      }
      devServerPlugin = honoDevServer({
        adapter,
        injectClientScript: false,
        entry: pluginConfig.serverEntryPoint,
        export: options.dev?.export || "default",
        exclude: [
          new RegExp(
            `^(?=\\/${pluginConfig.appDirectory.replace(/^[/\\]+|[/\\]+$/g, "").replaceAll(/[/\\]+/g, "/")}\\/)((?!.*\\.data(\\?|$)).*\\..*(\\?.*)?$)`
          ),
          new RegExp(
            `^(?=\\/${pluginConfig.appDirectory.replace(/^[/\\]+|[/\\]+$/g, "").replaceAll(/[/\\]+/g, "/").split("/")[0]}\\/)((?!.*\\.data(\\?|$)).*\\..*(\\?.*)?$)`
          ),
          /\?import(\?.*)?$/,
          /^\/@.+$/,
          /^\/node_modules\/.*/,
          `^(?=\\/${pluginConfig.appDirectory.replace(/^[/\\]+|[/\\]+$/g, "").replace(/[/\\]+/g, "/")}/**/.*/**)`,
          `^(?=\\/${pluginConfig.appDirectory.replace(/^[/\\]+|[/\\]+$/g, "").replace(/[/\\]+/g, "/").split("/")[0]}/**/.*/**)`,
          ...pluginConfig.dev?.exclude || []
        ]
      });
      server.middlewares.use((req, _res, next) => {
        req.rawHeaders.push("x-remote-address", req.socket.remoteAddress || "unknown");
        req.rawHeaders.push("x-remote-port", String(req.socket.remotePort || "unknown"));
        req.rawHeaders.push("x-remote-family", req.socket.remoteFamily || "unknown");
        next();
      });
      if (typeof devServerPlugin.configureServer === "function") {
        devServerPlugin.configureServer(server);
      } else {
        console.error("Dev server plugin configureServer hook is not a function. This is likely a bug, I guess \u{1F605}\n");
        throw new Error("Cannot apply dev server plugin configureServer hook");
      }
    }
  };
}
function resolvePluginConfig(config, options) {
  if (!("__reactRouterPluginContext" in config)) {
    return null;
  }
  const { reactRouterConfig, environmentBuildContext, rootDirectory } = config.__reactRouterPluginContext;
  const buildDirectory = path.relative(rootDirectory, reactRouterConfig.buildDirectory);
  const appDirectory = path.relative(rootDirectory, reactRouterConfig.appDirectory);
  const isSsrBuild = environmentBuildContext?.name === "ssr";
  const assetsDir = config.build?.assetsDir || "assets";
  const serverEntryPoint = options.serverEntryPoint || findDefaultServerEntry(appDirectory);
  const serverBuildFile = reactRouterConfig.serverBuildFile;
  const basename = reactRouterConfig.basename;
  const future = reactRouterConfig.future;
  return {
    rootDirectory,
    buildDirectory,
    appDirectory,
    isSsrBuild,
    assetsDir,
    serverEntryPoint,
    dev: options.dev,
    serverBuildFile,
    basename,
    future,
    flag: isCloudflareOptions(options) ? options.flag : {}
  };
}
var warned = false;
function findDefaultServerEntry(appDirectory) {
  const fileWay = `${appDirectory}/server.ts`;
  const folderWay = `${appDirectory}/server/index.ts`;
  if (fs.existsSync(fileWay)) {
    return fileWay;
  }
  if (fs.existsSync(folderWay)) {
    return folderWay;
  }
  if (!warned) {
    console.warn(
      `\x1B[33mNo server entry point found.
Will use a virtual module (${VIRTUAL_MODULE_ID}) with a default Hono server.

To customize the server, create one of the following files:
 - ${fileWay} (npx react-router-hono-server reveal file)
 - ${folderWay} (npx react-router-hono-server reveal folder)
You can also set the \`serverEntryPoint\` option in the reactRouterHonoServer plugin for more control.\x1B[0m
`
    );
    warned = true;
  }
  return VIRTUAL_MODULE_ID;
}
async function getReactVersion(pluginConfig) {
  if (pluginConfig?.flag?.force_react_19) {
    return 19;
  }
  const reactPackage = await import("react");
  const version = reactPackage.default.version || reactPackage.version;
  return Number.parseInt(version.split(".")[0]);
}
function isCloudflareOptions(options) {
  return options.runtime === "cloudflare";
}
export {
  reactRouterHonoServer
};
