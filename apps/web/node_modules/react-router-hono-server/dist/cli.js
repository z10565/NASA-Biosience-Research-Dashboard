#!/usr/bin/env node
// src/cli.ts
import fs from "fs";
import path from "path";
import { command, run } from "@drizzle-team/brocli";
var runtimeRegex = /runtime:\s*(['"])([^'"]*)\1/;
function guessRuntime() {
  try {
    const viteConfig = fs.readFileSync(path.resolve(process.cwd(), "vite.config.ts"), "utf-8");
    return viteConfig.match(runtimeRegex)?.[2] || "node";
  } catch {
    return "node";
  }
}
var runtime = guessRuntime();
var serverFile = `// generated by react-router-hono-server/dev
import { createHonoServer } from "react-router-hono-server/${runtime}";

export default await createHonoServer();`;
var file = command({
  name: "file",
  handler() {
    const serverFilePath = path.resolve(process.cwd(), "app", "server.ts");
    fs.writeFileSync(serverFilePath, serverFile);
    console.log(`\x1B[33m\u2728 File created at ${serverFilePath}\x1B[0m`);
  }
});
var folder = command({
  name: "folder",
  handler() {
    const serverFilePath = path.resolve(process.cwd(), "app", "server", "index.ts");
    if (!fs.existsSync(serverFilePath)) {
      fs.mkdirSync(path.dirname(serverFilePath), { recursive: true });
    }
    fs.writeFileSync(serverFilePath, serverFile);
    console.log(`\x1B[33m\u2728 Folder and file created at ${serverFilePath}\x1B[0m`);
  }
});
var reveal = command({
  name: "reveal",
  subcommands: [file, folder]
});
run([reveal], {
  name: "React Router Hono Server CLI"
});
