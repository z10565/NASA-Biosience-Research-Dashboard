import * as DialogPrimitive from '@radix-ui/react-dialog';
import React from 'react';

interface DialogProps {
    children?: React.ReactNode;
    open?: boolean;
    defaultOpen?: boolean;
    closeThreshold?: number;
    onOpenChange?(open: boolean): void;
    shouldScaleBackground?: boolean;
    scrollLockTimeout?: number;
    dismissible?: boolean;
    onDrag?(event: React.PointerEvent<HTMLDivElement>, percentageDragged: number): void;
    onRelease?(event: React.PointerEvent<HTMLDivElement>, open: boolean): void;
}
declare function Root({ open: openProp, defaultOpen, onOpenChange, children, shouldScaleBackground, onDrag: onDragProp, onRelease: onReleaseProp, closeThreshold, scrollLockTimeout, dismissible, }: DialogProps): React.JSX.Element;
declare function NestedRoot({ children, onDrag, onOpenChange }: DialogProps): React.JSX.Element;
declare const Drawer: {
    Root: typeof Root;
    NestedRoot: typeof NestedRoot;
    Content: React.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogContentProps & React.RefAttributes<HTMLDivElement>, "ref"> & {
        onAnimationEnd?: (open: boolean) => void;
    } & React.RefAttributes<HTMLDivElement>>;
    Overlay: React.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogOverlayProps & React.RefAttributes<HTMLDivElement>, "ref"> & React.RefAttributes<HTMLDivElement>>;
    Trigger: React.ForwardRefExoticComponent<DialogPrimitive.DialogTriggerProps & React.RefAttributes<HTMLButtonElement>>;
    Portal: React.FC<DialogPrimitive.DialogPortalProps>;
    Close: React.ForwardRefExoticComponent<DialogPrimitive.DialogCloseProps & React.RefAttributes<HTMLButtonElement>>;
    Title: React.ForwardRefExoticComponent<DialogPrimitive.DialogTitleProps & React.RefAttributes<HTMLHeadingElement>>;
    Description: React.ForwardRefExoticComponent<DialogPrimitive.DialogDescriptionProps & React.RefAttributes<HTMLParagraphElement>>;
};

export { Drawer };
