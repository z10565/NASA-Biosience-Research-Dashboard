'use strict';

var e = require('react');
var reactSlot = require('@radix-ui/react-slot');
var reactHookForm = require('react-hook-form');
var clsx = require('clsx');
var tailwindMerge = require('tailwind-merge');
var d = require('@radix-ui/react-label');
var classVarianceAuthority = require('class-variance-authority');

function _interopNamespace(e) {
	if (e && e.__esModule) return e;
	var n = Object.create(null);
	if (e) {
		Object.keys(e).forEach(function (k) {
			if (k !== 'default') {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	}
	n.default = e;
	return Object.freeze(n);
}

var e__namespace = /*#__PURE__*/_interopNamespace(e);
var d__namespace = /*#__PURE__*/_interopNamespace(d);

function s(...t){return tailwindMerge.twMerge(clsx.clsx(t))}var P=classVarianceAuthority.cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"),c=e__namespace.forwardRef(({className:t,...r},o)=>e__namespace.createElement(d__namespace.Root,{ref:o,className:s(P(),t),...r}));c.displayName=d__namespace.Root.displayName;var k=reactHookForm.FormProvider,p=e__namespace.createContext({}),q=({...t})=>e__namespace.createElement(p.Provider,{value:{name:t.name}},e__namespace.createElement(reactHookForm.Controller,{...t})),n=()=>{let t=e__namespace.useContext(p),r=e__namespace.useContext(u),{getFieldState:o,formState:a}=reactHookForm.useFormContext(),i=o(t.name,a);if(!t)throw new Error("useFormField should be used within <FormField>");let{id:m}=r;return {id:m,name:t.name,formItemId:`${m}-form-item`,formDescriptionId:`${m}-form-item-description`,formMessageId:`${m}-form-item-message`,...i}},u=e__namespace.createContext({}),y=e__namespace.forwardRef(({className:t,...r},o)=>{let a=e__namespace.useId();return e__namespace.createElement(u.Provider,{value:{id:a}},e__namespace.createElement("div",{ref:o,className:s("space-y-2",t),...r}))});y.displayName="FormItem";var T=e__namespace.forwardRef(({className:t,...r},o)=>{let{error:a,formItemId:i}=n();return e__namespace.createElement(c,{ref:o,className:s(a&&"text-destructive",t),htmlFor:i,...r})});T.displayName="FormLabel";var L=e__namespace.forwardRef(({...t},r)=>{let{error:o,formItemId:a,formDescriptionId:i,formMessageId:m}=n();return e__namespace.createElement(reactSlot.Slot,{ref:r,id:a,"aria-describedby":o?`${i} ${m}`:`${i}`,"aria-invalid":!!o,...t})});L.displayName="FormControl";var I=e__namespace.forwardRef(({className:t,...r},o)=>{let{formDescriptionId:a}=n();return e__namespace.createElement("p",{ref:o,id:a,className:s("text-sm text-muted-foreground",t),...r})});I.displayName="FormDescription";var N=e__namespace.forwardRef(({className:t,children:r,...o},a)=>{let{error:i,formMessageId:m}=n(),f=i?String(i?.message):r;return f?e__namespace.createElement("p",{ref:a,id:m,className:s("text-sm font-medium text-destructive",t),...o},f):null});N.displayName="FormMessage";

exports.Form = k;
exports.FormControl = L;
exports.FormDescription = I;
exports.FormField = q;
exports.FormItem = y;
exports.FormLabel = T;
exports.FormMessage = N;
exports.useFormField = n;
