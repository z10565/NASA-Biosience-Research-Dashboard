import {
  __publicField
} from "./chunk-OL46QLBJ.js";

// node_modules/serialize-error/error-constructors.js
var list = [
  // Native ES errors https://262.ecma-international.org/12.0/#sec-well-known-intrinsic-objects
  Error,
  EvalError,
  RangeError,
  ReferenceError,
  SyntaxError,
  TypeError,
  URIError,
  AggregateError,
  // Built-in errors
  globalThis.DOMException,
  // Node-specific errors
  // https://nodejs.org/api/errors.html
  globalThis.AssertionError,
  globalThis.SystemError
].filter(Boolean).map(
  (constructor) => [constructor.name, constructor]
);
var errorConstructors = new Map(list);
function addKnownErrorConstructor(constructor) {
  const { name } = constructor;
  if (errorConstructors.has(name)) {
    throw new Error(`The error constructor "${name}" is already known.`);
  }
  try {
    new constructor();
  } catch (error) {
    throw new Error(`The error constructor "${name}" is not compatible`, { cause: error });
  }
  errorConstructors.set(name, constructor);
}

// node_modules/serialize-error/index.js
var NonError = class _NonError extends Error {
  constructor(message) {
    super(_NonError._prepareSuperMessage(message));
    __publicField(this, "name", "NonError");
  }
  static _prepareSuperMessage(message) {
    try {
      return JSON.stringify(message);
    } catch {
      return String(message);
    }
  }
};
var errorProperties = [
  {
    property: "name",
    enumerable: false
  },
  {
    property: "message",
    enumerable: false
  },
  {
    property: "stack",
    enumerable: false
  },
  {
    property: "code",
    enumerable: true
  },
  {
    property: "cause",
    enumerable: false
  },
  {
    property: "errors",
    enumerable: false
  }
];
var toJsonWasCalled = /* @__PURE__ */ new WeakSet();
var toJSON = (from) => {
  toJsonWasCalled.add(from);
  const json = from.toJSON();
  toJsonWasCalled.delete(from);
  return json;
};
var newError = (name) => {
  const ErrorConstructor = errorConstructors.get(name) ?? Error;
  return ErrorConstructor === AggregateError ? new ErrorConstructor([]) : new ErrorConstructor();
};
var destroyCircular = ({
  from,
  seen,
  to,
  forceEnumerable,
  maxDepth,
  depth,
  useToJSON,
  serialize
}) => {
  if (!to) {
    if (Array.isArray(from)) {
      to = [];
    } else if (!serialize && isErrorLike(from)) {
      to = newError(from.name);
    } else {
      to = {};
    }
  }
  seen.push(from);
  if (depth >= maxDepth) {
    return to;
  }
  if (useToJSON && typeof from.toJSON === "function" && !toJsonWasCalled.has(from)) {
    return toJSON(from);
  }
  const continueDestroyCircular = (value) => destroyCircular({
    from: value,
    seen: [...seen],
    forceEnumerable,
    maxDepth,
    depth,
    useToJSON,
    serialize
  });
  for (const [key, value] of Object.entries(from)) {
    if (value && value instanceof Uint8Array && value.constructor.name === "Buffer") {
      to[key] = "[object Buffer]";
      continue;
    }
    if (value !== null && typeof value === "object" && typeof value.pipe === "function") {
      to[key] = "[object Stream]";
      continue;
    }
    if (typeof value === "function") {
      continue;
    }
    if (!value || typeof value !== "object") {
      try {
        to[key] = value;
      } catch {
      }
      continue;
    }
    if (!seen.includes(from[key])) {
      depth++;
      to[key] = continueDestroyCircular(from[key]);
      continue;
    }
    to[key] = "[Circular]";
  }
  if (serialize || to instanceof Error) {
    for (const { property, enumerable } of errorProperties) {
      if (from[property] !== void 0 && from[property] !== null) {
        Object.defineProperty(to, property, {
          value: isErrorLike(from[property]) || Array.isArray(from[property]) ? continueDestroyCircular(from[property]) : from[property],
          enumerable: forceEnumerable ? true : enumerable,
          configurable: true,
          writable: true
        });
      }
    }
  }
  return to;
};
function serializeError(value, options = {}) {
  const {
    maxDepth = Number.POSITIVE_INFINITY,
    useToJSON = true
  } = options;
  if (typeof value === "object" && value !== null) {
    return destroyCircular({
      from: value,
      seen: [],
      forceEnumerable: true,
      maxDepth,
      depth: 0,
      useToJSON,
      serialize: true
    });
  }
  if (typeof value === "function") {
    return `[Function: ${value.name || "anonymous"}]`;
  }
  return value;
}
function deserializeError(value, options = {}) {
  const { maxDepth = Number.POSITIVE_INFINITY } = options;
  if (value instanceof Error) {
    return value;
  }
  if (isMinimumViableSerializedError(value)) {
    return destroyCircular({
      from: value,
      seen: [],
      to: newError(value.name),
      maxDepth,
      depth: 0,
      serialize: false
    });
  }
  return new NonError(value);
}
function isErrorLike(value) {
  return Boolean(value) && typeof value === "object" && typeof value.name === "string" && typeof value.message === "string" && typeof value.stack === "string";
}
function isMinimumViableSerializedError(value) {
  return Boolean(value) && typeof value === "object" && typeof value.message === "string" && !Array.isArray(value);
}
export {
  NonError,
  addKnownErrorConstructor,
  deserializeError,
  isErrorLike,
  serializeError
};
//# sourceMappingURL=serialize-error.js.map
