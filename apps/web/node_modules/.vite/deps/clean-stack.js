import {
  require_node_url
} from "./chunk-UBU6NWLL.js";
import {
  __toESM
} from "./chunk-OL46QLBJ.js";

// node_modules/clean-stack/index.js
var import_node_url = __toESM(require_node_url());

// node_modules/clean-stack/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/clean-stack/home-directory-browser.js
var getHomeDirectory = () => "";
var home_directory_browser_default = getHomeDirectory;

// node_modules/clean-stack/index.js
var extractPathRegex = /\s+at.*[(\s](.*)\)?/;
var pathRegex = /^(?:(?:(?:node|node:[\w/]+|(?:(?:node:)?internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)(?:\.js)?:\d+:\d+)|native)/;
function cleanStack(stack, { pretty = false, basePath, pathFilter } = {}) {
  const basePathRegex = basePath && new RegExp(`(file://)?${escapeStringRegexp(basePath.replace(/\\/g, "/"))}/?`, "g");
  const homeDirectory = pretty ? home_directory_browser_default() : "";
  if (typeof stack !== "string") {
    return void 0;
  }
  return stack.replace(/\\/g, "/").split("\n").filter((line) => {
    const pathMatches = line.match(extractPathRegex);
    if (pathMatches === null || !pathMatches[1]) {
      return true;
    }
    const match = pathMatches[1];
    if (match.includes(".app/Contents/Resources/electron.asar") || match.includes(".app/Contents/Resources/default_app.asar") || match.includes("node_modules/electron/dist/resources/electron.asar") || match.includes("node_modules/electron/dist/resources/default_app.asar")) {
      return false;
    }
    return pathFilter ? !pathRegex.test(match) && pathFilter(match) : !pathRegex.test(match);
  }).filter((line) => line.trim() !== "").map((line) => {
    if (basePathRegex) {
      line = line.replace(basePathRegex, "");
    }
    if (pretty) {
      line = line.replace(extractPathRegex, (m, p1) => {
        let filePath = p1;
        if (filePath.startsWith("file://")) {
          filePath = (0, import_node_url.fileURLToPath)(filePath);
        }
        filePath = filePath.replace(homeDirectory, "~");
        return m.replace(p1, filePath);
      });
    }
    return line;
  }).join("\n");
}
export {
  cleanStack as default
};
//# sourceMappingURL=clean-stack.js.map
