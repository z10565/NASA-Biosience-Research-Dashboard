import {
  mergeConfig,
  require_assert,
  require_buffer,
  require_child_process,
  require_crypto,
  require_http,
  require_https,
  require_main,
  require_module,
  require_net,
  require_node_buffer,
  require_node_child_process,
  require_node_dns,
  require_node_events,
  require_node_net,
  require_node_querystring,
  require_node_readline,
  require_node_worker_threads,
  require_node_zlib,
  require_picomatch,
  require_tls,
  require_tty,
  require_zlib
} from "./chunk-Q3XI3RO7.js";
import {
  require_url
} from "./chunk-MJAJF77I.js";
import {
  require_node_https
} from "./chunk-POFGPJ6W.js";
import {
  require_node_assert,
  require_node_crypto,
  require_node_module,
  require_node_util,
  require_node_v8
} from "./chunk-N5HBKQYR.js";
import {
  require_node_os
} from "./chunk-CUJJHL4M.js";
import {
  require_promises
} from "./chunk-X4CRQULJ.js";
import {
  require_node_fs,
  require_node_path,
  require_node_perf_hooks,
  require_node_process
} from "./chunk-FWGMBMZS.js";
import {
  require_node_http
} from "./chunk-6AOBALTA.js";
import {
  require_node_url
} from "./chunk-UBU6NWLL.js";
import {
  require_events,
  require_os,
  require_stream,
  require_util
} from "./chunk-5HYKNQUR.js";
import {
  require_fs
} from "./chunk-6KGMDUP6.js";
import {
  require_path
} from "./chunk-3L3XZB35.js";
import {
  __toESM
} from "./chunk-OL46QLBJ.js";

// node_modules/vitest/dist/chunks/constants.DnKduX2e.js
var defaultBrowserPort = 63315;
var extraInlineDeps = [
  /^(?!.*node_modules).*\.mjs$/,
  /^(?!.*node_modules).*\.cjs\.js$/,
  /vite\w*\/dist\/client\/env.mjs/
];
var CONFIG_NAMES = ["vitest.config", "vite.config"];
var WORKSPACES_NAMES = ["vitest.workspace", "vitest.projects"];
var CONFIG_EXTENSIONS = [
  ".ts",
  ".mts",
  ".cts",
  ".js",
  ".mjs",
  ".cjs"
];
var configFiles = CONFIG_NAMES.flatMap((name) => CONFIG_EXTENSIONS.map((ext) => name + ext));
var WORKSPACES_EXTENSIONS = [...CONFIG_EXTENSIONS, ".json"];
var workspacesFiles = WORKSPACES_NAMES.flatMap((name) => WORKSPACES_EXTENSIONS.map((ext) => name + ext));

// node_modules/vitest/dist/chunks/defaults.B7q_naMc.js
var import_node_os = __toESM(require_node_os(), 1);

// node_modules/std-env/dist/index.mjs
var r = /* @__PURE__ */ Object.create(null);
var i = (e) => {
  var _a11, _b6;
  return ((_a11 = globalThis.process) == null ? void 0 : _a11.env) || import.meta.env || ((_b6 = globalThis.Deno) == null ? void 0 : _b6.env.toObject()) || globalThis.__env__ || (e ? r : globalThis);
};
var o = new Proxy(r, { get(e, s) {
  return i()[s] ?? r[s];
}, has(e, s) {
  const E = i();
  return s in E || s in r;
}, set(e, s, E) {
  const B = i(true);
  return B[s] = E, true;
}, deleteProperty(e, s) {
  if (!s) return false;
  const E = i(true);
  return delete E[s], true;
}, ownKeys() {
  const e = i(true);
  return Object.keys(e);
} });
var t = typeof process < "u" && process.env && "development" || "";
var f = [["APPVEYOR"], ["AWS_AMPLIFY", "AWS_APP_ID", { ci: true }], ["AZURE_PIPELINES", "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI"], ["AZURE_STATIC", "INPUT_AZURE_STATIC_WEB_APPS_API_TOKEN"], ["APPCIRCLE", "AC_APPCIRCLE"], ["BAMBOO", "bamboo_planKey"], ["BITBUCKET", "BITBUCKET_COMMIT"], ["BITRISE", "BITRISE_IO"], ["BUDDY", "BUDDY_WORKSPACE_ID"], ["BUILDKITE"], ["CIRCLE", "CIRCLECI"], ["CIRRUS", "CIRRUS_CI"], ["CLOUDFLARE_PAGES", "CF_PAGES", { ci: true }], ["CLOUDFLARE_WORKERS", "WORKERS_CI", { ci: true }], ["CODEBUILD", "CODEBUILD_BUILD_ARN"], ["CODEFRESH", "CF_BUILD_ID"], ["DRONE"], ["DRONE", "DRONE_BUILD_EVENT"], ["DSARI"], ["GITHUB_ACTIONS"], ["GITLAB", "GITLAB_CI"], ["GITLAB", "CI_MERGE_REQUEST_ID"], ["GOCD", "GO_PIPELINE_LABEL"], ["LAYERCI"], ["HUDSON", "HUDSON_URL"], ["JENKINS", "JENKINS_URL"], ["MAGNUM"], ["NETLIFY"], ["NETLIFY", "NETLIFY_LOCAL", { ci: false }], ["NEVERCODE"], ["RENDER"], ["SAIL", "SAILCI"], ["SEMAPHORE"], ["SCREWDRIVER"], ["SHIPPABLE"], ["SOLANO", "TDDIUM"], ["STRIDER"], ["TEAMCITY", "TEAMCITY_VERSION"], ["TRAVIS"], ["VERCEL", "NOW_BUILDER"], ["VERCEL", "VERCEL", { ci: false }], ["VERCEL", "VERCEL_ENV", { ci: false }], ["APPCENTER", "APPCENTER_BUILD_ID"], ["CODESANDBOX", "CODESANDBOX_SSE", { ci: false }], ["CODESANDBOX", "CODESANDBOX_HOST", { ci: false }], ["STACKBLITZ"], ["STORMKIT"], ["CLEAVR"], ["ZEABUR"], ["CODESPHERE", "CODESPHERE_APP_ID", { ci: true }], ["RAILWAY", "RAILWAY_PROJECT_ID"], ["RAILWAY", "RAILWAY_SERVICE_ID"], ["DENO-DEPLOY", "DENO_DEPLOYMENT_ID"], ["FIREBASE_APP_HOSTING", "FIREBASE_APP_HOSTING", { ci: true }]];
function b() {
  var _a11, _b6, _c, _d, _e, _f;
  if ((_a11 = globalThis.process) == null ? void 0 : _a11.env) for (const e of f) {
    const s = e[1] || e[0];
    if ((_b6 = globalThis.process) == null ? void 0 : _b6.env[s]) return { name: e[0].toLowerCase(), ...e[2] };
  }
  return ((_d = (_c = globalThis.process) == null ? void 0 : _c.env) == null ? void 0 : _d.SHELL) === "/bin/jsh" && ((_f = (_e = globalThis.process) == null ? void 0 : _e.versions) == null ? void 0 : _f.webcontainer) ? { name: "stackblitz", ci: false } : { name: "", ci: false };
}
var l = b();
var p = l.name;
function n(e) {
  return e ? e !== "false" : false;
}
var _a;
var I = ((_a = globalThis.process) == null ? void 0 : _a.platform) || "";
var T = n(o.CI) || l.ci !== false;
var _a2, _b;
var R = n(((_a2 = globalThis.process) == null ? void 0 : _a2.stdout) && ((_b = globalThis.process) == null ? void 0 : _b.stdout.isTTY));
var d = n(o.DEBUG);
var a = t === "test" || n(o.TEST);
var v = n(o.MINIMAL) || T || a || !R;
var A = /^win/i.test(I);
var M = /^linux/i.test(I);
var m = /^darwin/i.test(I);
var Y = !n(o.NO_COLOR) && (n(o.FORCE_COLOR) || (R || A) && o.TERM !== "dumb" || T);
var _a3, _b2;
var C = (((_b2 = (_a3 = globalThis.process) == null ? void 0 : _a3.versions) == null ? void 0 : _b2.node) || "").replace(/^v/, "") || null;
var V = Number(C == null ? void 0 : C.split(".")[0]) || null;
var W = globalThis.process || /* @__PURE__ */ Object.create(null);
var _ = { versions: {} };
var y = new Proxy(W, { get(e, s) {
  if (s === "env") return o;
  if (s in e) return e[s];
  if (s in _) return _[s];
} });
var _a4, _b3;
var O = ((_b3 = (_a4 = globalThis.process) == null ? void 0 : _a4.release) == null ? void 0 : _b3.name) === "node";
var _a5, _b4;
var c = !!globalThis.Bun || !!((_b4 = (_a5 = globalThis.process) == null ? void 0 : _a5.versions) == null ? void 0 : _b4.bun);
var D = !!globalThis.Deno;
var L = !!globalThis.fastly;
var S = !!globalThis.Netlify;
var u = !!globalThis.EdgeRuntime;
var _a6;
var N = ((_a6 = globalThis.navigator) == null ? void 0 : _a6.userAgent) === "Cloudflare-Workers";
var F = [[S, "netlify"], [u, "edge-light"], [N, "workerd"], [L, "fastly"], [D, "deno"], [c, "bun"], [O, "node"]];
function G() {
  const e = F.find((s) => s[0]);
  if (e) return { name: e[1] };
}
var P = G();
var K = (P == null ? void 0 : P.name) || "";

// node_modules/vitest/dist/chunks/env.D4Lgay0q.js
var _a7;
var isNode = typeof process < "u" && typeof process.stdout < "u" && !((_a7 = process.versions) == null ? void 0 : _a7.deno) && !globalThis.window;
var _a8;
var isDeno = typeof process < "u" && typeof process.stdout < "u" && ((_a8 = process.versions) == null ? void 0 : _a8.deno) !== void 0;
var isWindows = (isNode || isDeno) && process.platform === "win32";
var _a9;
var isTTY = (isNode || isDeno) && ((_a9 = process.stdout) == null ? void 0 : _a9.isTTY) && !T;

// node_modules/vitest/dist/chunks/defaults.B7q_naMc.js
var defaultInclude = ["**/*.{test,spec}.?(c|m)[jt]s?(x)"];
var defaultExclude = [
  "**/node_modules/**",
  "**/dist/**",
  "**/cypress/**",
  "**/.{idea,git,cache,output,temp}/**",
  "**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build,eslint,prettier}.config.*"
];
var defaultCoverageExcludes = [
  "coverage/**",
  "dist/**",
  "**/node_modules/**",
  "**/[.]**",
  "packages/*/test?(s)/**",
  "**/*.d.ts",
  "**/virtual:*",
  "**/__x00__*",
  "**/\0*",
  "cypress/**",
  "test?(s)/**",
  "test?(-*).?(c|m)[jt]s?(x)",
  "**/*{.,-}{test,spec,bench,benchmark}?(-d).?(c|m)[jt]s?(x)",
  "**/__tests__/**",
  "**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build,eslint,prettier}.config.*",
  "**/vitest.{workspace,projects}.[jt]s?(on)",
  "**/.{eslint,mocha,prettier}rc.{?(c|m)js,yml}"
];
var _a10, _b5;
var coverageConfigDefaults = {
  provider: "v8",
  enabled: false,
  all: true,
  clean: true,
  cleanOnRerun: true,
  reportsDirectory: "./coverage",
  exclude: defaultCoverageExcludes,
  reportOnFailure: false,
  reporter: [
    ["text", {}],
    ["html", {}],
    ["clover", {}],
    ["json", {}]
  ],
  extension: [
    ".js",
    ".cjs",
    ".mjs",
    ".ts",
    ".mts",
    ".tsx",
    ".jsx",
    ".vue",
    ".svelte",
    ".marko",
    ".astro"
  ],
  allowExternal: false,
  excludeAfterRemap: false,
  ignoreEmptyLines: true,
  processingConcurrency: Math.min(20, ((_b5 = (_a10 = import_node_os.default).availableParallelism) == null ? void 0 : _b5.call(_a10)) ?? import_node_os.default.cpus().length)
};
var fakeTimersDefaults = {
  loopLimit: 1e4,
  shouldClearNativeTimers: true
};
var configDefaults = Object.freeze({
  allowOnly: !T,
  isolate: true,
  watch: !T && process.stdin.isTTY,
  globals: false,
  environment: "node",
  pool: "forks",
  clearMocks: false,
  restoreMocks: false,
  mockReset: false,
  unstubGlobals: false,
  unstubEnvs: false,
  include: defaultInclude,
  exclude: defaultExclude,
  teardownTimeout: 1e4,
  forceRerunTriggers: ["**/package.json/**", "**/{vitest,vite}.config.*/**"],
  update: false,
  reporters: [],
  silent: false,
  hideSkippedTests: false,
  api: false,
  ui: false,
  uiBase: "/__vitest__/",
  open: !T,
  css: { include: [] },
  coverage: coverageConfigDefaults,
  fakeTimers: fakeTimersDefaults,
  maxConcurrency: 5,
  dangerouslyIgnoreUnhandledErrors: false,
  typecheck: {
    checker: "tsc",
    include: ["**/*.{test,spec}-d.?(c|m)[jt]s?(x)"],
    exclude: defaultExclude
  },
  slowTestThreshold: 300,
  disableConsoleIntercept: false
});

// node_modules/vite/dist/node/index.js
var import_esbuild = __toESM(require_main());
var import_node_fs = __toESM(require_node_fs());
var import_node_path = __toESM(require_node_path());
var import_promises = __toESM(require_promises());
var import_node_url = __toESM(require_node_url());
var import_node_util = __toESM(require_node_util());
var import_node_perf_hooks = __toESM(require_node_perf_hooks());
var import_node_module = __toESM(require_node_module());
var import_node_crypto = __toESM(require_node_crypto());
var import_picomatch = __toESM(require_picomatch());
var import_path = __toESM(require_path());
var import_fs = __toESM(require_fs());
var import_node_child_process = __toESM(require_node_child_process());
var import_node_http = __toESM(require_node_http());
var import_node_https = __toESM(require_node_https());
var import_tty = __toESM(require_tty());
var import_util = __toESM(require_util());
var import_net = __toESM(require_net());
var import_events = __toESM(require_events());
var import_url = __toESM(require_url());
var import_http = __toESM(require_http());
var import_stream = __toESM(require_stream());
var import_os = __toESM(require_os());
var import_child_process = __toESM(require_child_process());
var import_node_os2 = __toESM(require_node_os());
var import_node_net = __toESM(require_node_net());
var import_node_dns = __toESM(require_node_dns());
var import_node_buffer = __toESM(require_node_buffer());
var import_module = __toESM(require_module());
var import_node_readline = __toESM(require_node_readline());
var import_node_process = __toESM(require_node_process());
var import_node_events = __toESM(require_node_events());
var import_crypto = __toESM(require_crypto());
var import_node_assert = __toESM(require_node_assert());
var import_node_v8 = __toESM(require_node_v8());
var import_node_worker_threads = __toESM(require_node_worker_threads());
var import_https = __toESM(require_https());
var import_tls = __toESM(require_tls());
var import_zlib = __toESM(require_zlib());
var import_buffer = __toESM(require_buffer());
var import_assert = __toESM(require_assert());
var import_node_querystring = __toESM(require_node_querystring());
var import_node_zlib = __toESM(require_node_zlib());

// node_modules/vitest/dist/config.js
var import_node_os3 = __toESM(require_node_os());
function defineConfig2(config) {
  return config;
}
function defineProject(config) {
  return config;
}
function defineWorkspace(config) {
  return config;
}
export {
  configDefaults,
  coverageConfigDefaults,
  defaultBrowserPort,
  defaultExclude,
  defaultInclude,
  defineConfig2 as defineConfig,
  defineProject,
  defineWorkspace,
  extraInlineDeps,
  mergeConfig
};
//# sourceMappingURL=vitest_config.js.map
